We have another executable with s(SUID) permission again this time.

level13@SnowCrash:~$ ./level13 
UID 2013 started us but we we expect 4242

If we use the id command, we can see that current user level13 is having an UID of 2013 which means the program is using something like getuid().

level13@SnowCrash:~$ ltrace ./level13
__libc_start_main(0x804858c, 1, 0xbffff7e4, 0x80485f0, 0x8048660 <unfinished ...>
getuid()                                                                              = 2013
getuid()                                                                              = 2013
printf("UID %d started us but we we expe"..., 2013UID 2013 started us but we we expect 4242
)                                   = 42
exit(1 <unfinished ...>
+++ exited (status 1) +++

There is no echo or any other system command to exploit..

Let's use the gdb debugger to get more information from this executable.

level13@SnowCrash:~$ gdb -q level13
Reading symbols from /home/user/level13/level13...(no debugging symbols found)...done.
(gdb) info functions
All defined functions:

Non-debugging symbols:
0x08048314  _init
0x08048360  printf
0x08048360  printf@plt
0x08048370  strdup
0x08048370  strdup@plt
0x08048380  getuid
0x08048380  getuid@plt
0x08048390  __gmon_start__
0x08048390  __gmon_start__@plt
0x080483a0  exit
0x080483a0  exit@plt
0x080483b0  __libc_start_main
0x080483b0  __libc_start_main@plt
0x080483c0  _start
0x080483f0  __do_global_dtors_aux
0x08048450  frame_dummy
0x08048474  ft_des
0x0804858c  main
0x080485f0  __libc_csu_init
0x08048660  __libc_csu_fini
0x08048662  __i686.get_pc_thunk.bx
0x08048670  __do_global_ctors_aux
0x0804869c  _fini
(gdb) disassemble main
Dump of assembler code for function main:
   0x0804858c <+0>:	push   %ebp
   0x0804858d <+1>:	mov    %esp,%ebp
   0x0804858f <+3>:	and    $0xfffffff0,%esp
   0x08048592 <+6>:	sub    $0x10,%esp
   0x08048595 <+9>:	call   0x8048380 <getuid@plt>
   0x0804859a <+14>:	cmp    $0x1092,%eax
   0x0804859f <+19>:	je     0x80485cb <main+63>
   0x080485a1 <+21>:	call   0x8048380 <getuid@plt>
   0x080485a6 <+26>:	mov    $0x80486c8,%edx
   0x080485ab <+31>:	movl   $0x1092,0x8(%esp)
   0x080485b3 <+39>:	mov    %eax,0x4(%esp)
   0x080485b7 <+43>:	mov    %edx,(%esp)
   0x080485ba <+46>:	call   0x8048360 <printf@plt>
   0x080485bf <+51>:	movl   $0x1,(%esp)
   0x080485c6 <+58>:	call   0x80483a0 <exit@plt>
   0x080485cb <+63>:	movl   $0x80486ef,(%esp)
   0x080485d2 <+70>:	call   0x8048474 <ft_des>
   0x080485d7 <+75>:	mov    $0x8048709,%edx
   0x080485dc <+80>:	mov    %eax,0x4(%esp)
   0x080485e0 <+84>:	mov    %edx,(%esp)
   0x080485e3 <+87>:	call   0x8048360 <printf@plt>
   0x080485e8 <+92>:	leave  
   0x080485e9 <+93>:	ret    
End of assembler dump.

Now we can see the assembly code. In line 9, the program is calling the getuid() and the next line it is doing "cmp $0x1092,%eax", followed by "je 0x80485cb <main+63>".

The return value of a function call is stored in the EAX, so we can see that the program is using cmp to compares the value in the address 0x1092 vs eax.

Base on all this analysis, we can conclude that line 14 is were the program is checking if we have the UID 4242 and if yes we can skip to line 63.

What if we can just skip the whole code and go to line 63 to start the code from that point instead.
First we set a break point at the start of the function with break main then we run the program.
It will run up to the breakpoint that we have set, which is the start of the main().
The we can use the jump (*address) command to continue the program in the address that we want, and here we give the address of line 63.

level13@SnowCrash:~$ gdb -q level13
Reading symbols from /home/user/level13/level13...(no debugging symbols found)...done.
(gdb) break main
Breakpoint 1 at 0x804858f
(gdb) run
Starting program: /home/user/level13/level13 

Breakpoint 1, 0x0804858f in main ()
(gdb) jump *0x80485cb
Continuing at 0x80485cb.
your token is 2A31L79asukciNyi8uppkEuSx

Program received signal SIGSEGV, Segmentation fault.
0x0804b008 in ?? ()

